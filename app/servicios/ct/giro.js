"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
//Exportaci√≥n de la clase usuario
var GiroService = (function () {
    //constructor del http para los servicios REST
    function GiroService(http) {
        this.http = http;
    }
    //Llamado al servicio REST "get"
    GiroService.prototype.getQuote = function () {
        var headers = new http_1.Headers();
        var resultado;
        headers.append("Content-Type", "application/json");
        this.http.get("http://192.168.2.153:8810/Painanis/rest/painanis/as_ctGiro_gen")
            .map(function (response) { return response.json(); })
            .subscribe(function (result) {
            console.log("Servicio", JSON.stringify(result));
            resultado = JSON.stringify(result);
        }, function (error) {
            console.log("ERROR: ", error);
        });
        console.log("Servico resultado", resultado);
        return Promise.resolve(resultado);
    };
    GiroService.prototype.getQuoteRetardo = function () {
        var _this = this;
        return new Promise(function (resolve) {
            setTimeout(resolve, 500);
        }).then(function () { return _this.getQuote(); });
    };
    //Llamado al servicio REST "post"
    GiroService.prototype.postQuote = function (giro) {
        var tt_ctGiro = [giro];
        var ttctRegistro = [giro];
        console.log(tt_ctGiro);
        console.log(JSON.stringify({ "request": { "dtGiro": { tt_ctGiro: tt_ctGiro }
            }
        }));
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        this.http.post("http://192.168.2.153:8810/Painanis/rest/painanis/as_ctGiro_gen", JSON.stringify({ "request": { "dtGiro": { tt_ctGiro: tt_ctGiro }
            }
        }), { headers: headers })
            .map(function (response) { return response.json(); })
            .subscribe(function (result) {
            console.log(JSON.stringify(result));
            console.log(result.response.oplResultado);
            console.log(result.response.opcMensaje);
        }, function (error) {
            console.log("ERROR: ", error);
        });
    };
    return GiroService;
}());
GiroService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], GiroService);
exports.GiroService = GiroService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lyby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdpcm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0Msc0NBQXdEO0FBR3hELGdDQUE4QjtBQUM5QixpQ0FBK0I7QUFDL0IsaUNBQWlDO0FBRWpDLElBQWEsV0FBVztJQUV0Qiw4Q0FBOEM7SUFDOUMscUJBQW9CLElBQVU7UUFBVixTQUFJLEdBQUosSUFBSSxDQUFNO0lBQUcsQ0FBQztJQUVsQyxnQ0FBZ0M7SUFDOUIsOEJBQVEsR0FBUjtRQUNFLElBQUksT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUM7UUFDNUIsSUFBSSxTQUFTLENBQUM7UUFDZCxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdFQUFnRSxDQUFDO2FBQzVFLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBZixDQUFlLENBQUM7YUFDOUIsU0FBUyxDQUFDLFVBQUEsTUFBTTtZQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMvQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFBQSxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxxQ0FBZSxHQUFmO1FBQUEsaUJBS0M7UUFKQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQ1osVUFBQyxPQUFPO1lBQ04sVUFBVSxDQUFDLE9BQU8sRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUN6QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBSyxPQUFBLEtBQUksQ0FBQyxRQUFRLEVBQUUsRUFBZixDQUFlLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsaUNBQWlDO0lBQ2pDLCtCQUFTLEdBQVQsVUFBVSxJQUFVO1FBQ2pCLElBQUksU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsSUFBSSxZQUFZLEdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXZCLE9BQU8sQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFNBQVMsRUFDbkIsRUFBQyxRQUFRLEVBQ1AsRUFBQyxTQUFTLFdBQUEsRUFBQzthQUNaO1NBRUYsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdFQUFnRSxFQUMvRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsU0FBUyxFQUNSLEVBQUMsUUFBUSxFQUNQLEVBQUMsU0FBUyxXQUFBLEVBQUM7YUFDWjtTQUNGLENBQUMsRUFDWixFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQzthQUVwQixHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQWYsQ0FBZSxDQUFDO2FBQ2hDLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFDLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBM0RELElBMkRDO0FBM0RZLFdBQVc7SUFEdkIsaUJBQVUsRUFBRTtxQ0FJZSxXQUFJO0dBSG5CLFdBQVcsQ0EyRHZCO0FBM0RZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMsIFJlc3BvbnNlIH0gZnJvbSBcIkBhbmd1bGFyL2h0dHBcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL1J4XCI7XHJcbmltcG9ydCB7IEdpcm8gfWZyb20gXCIuLi8uLi9tb2RlbG9zL2N0L2dpcm9cIjtcclxuaW1wb3J0IFwicnhqcy9hZGQvb3BlcmF0b3IvZG9cIjtcclxuaW1wb3J0IFwicnhqcy9hZGQvb3BlcmF0b3IvbWFwXCI7XHJcbi8vRXhwb3J0YWNpw7NuIGRlIGxhIGNsYXNlIHVzdWFyaW9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgR2lyb1NlcnZpY2Uge1xyXG5cclxuICAvL2NvbnN0cnVjdG9yIGRlbCBodHRwIHBhcmEgbG9zIHNlcnZpY2lvcyBSRVNUXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwKSB7fVxyXG5cclxuICAvL0xsYW1hZG8gYWwgc2VydmljaW8gUkVTVCBcImdldFwiXHJcbiAgICBnZXRRdW90ZSgpe1xyXG4gICAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XHJcbiAgICAgIGxldCByZXN1bHRhZG87XHJcbiAgICAgIGhlYWRlcnMuYXBwZW5kKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcclxuICAgICAgdGhpcy5odHRwLmdldChcImh0dHA6Ly8xOTIuMTY4LjIuMTUzOjg4MTAvUGFpbmFuaXMvcmVzdC9wYWluYW5pcy9hc19jdEdpcm9fZ2VuXCIpXHJcbiAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2VydmljaW9cIixKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcclxuICAgICAgICAgICAgcmVzdWx0YWRvID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcclxuICAgICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SOiBcIiwgZXJyb3IpO30pO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNvIHJlc3VsdGFkb1wiLHJlc3VsdGFkbyk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdGFkbyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UXVvdGVSZXRhcmRvKCk6UHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oXHJcbiAgICAgICAgICAgIChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLDUwMClcclxuICAgICAgICAgICAgfSkudGhlbigoKT0+IHRoaXMuZ2V0UXVvdGUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9MbGFtYWRvIGFsIHNlcnZpY2lvIFJFU1QgXCJwb3N0XCJcclxuICAgIHBvc3RRdW90ZShnaXJvOiBHaXJvKSB7XHJcbiAgICAgICB2YXIgdHRfY3RHaXJvID0gW2dpcm9dO1xyXG4gICAgICAgdmFyIHR0Y3RSZWdpc3RybyAgPSBbZ2lyb107XHJcbiAgICAgICBjb25zb2xlLmxvZyh0dF9jdEdpcm8pXHJcblxyXG4gICAgICBjb25zb2xlLmxvZyggSlNPTi5zdHJpbmdpZnkoeyBcInJlcXVlc3RcIiA6IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcImR0R2lyb1wiIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0dF9jdEdpcm99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xyXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcclxuICAgICAgICB0aGlzLmh0dHAucG9zdChcImh0dHA6Ly8xOTIuMTY4LjIuMTUzOjg4MTAvUGFpbmFuaXMvcmVzdC9wYWluYW5pcy9hc19jdEdpcm9fZ2VuXCIsIFxyXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHsgXCJyZXF1ZXN0XCIgOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XCJkdEdpcm9cIiA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dHRfY3RHaXJvfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIFxyXG4gICAgICAgICAgICAgIHsgaGVhZGVyczogaGVhZGVycyB9KVxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAgIC5zdWJzY3JpYmUocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC5yZXNwb25zZS5vcGxSZXN1bHRhZG8pO1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQucmVzcG9uc2Uub3BjTWVuc2FqZSk7XHJcbiAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRVJST1I6IFwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=