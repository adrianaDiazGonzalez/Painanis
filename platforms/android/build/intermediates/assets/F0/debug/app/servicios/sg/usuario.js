"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//Importaciones de recursos que se usan en el código
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
//Exportación de la clase usuario
var UserService = (function () {
    //constructor del http para los servicios REST
    function UserService(http) {
        this.http = http;
    }
    //Llamado al servicio REST "get"
    UserService.prototype.getQuote = function () {
        this.http.get("http://192.168.2.153:8810/Pruebas/rest/Evento/Post")
            .map(function (response) { return response.json(); })
            .subscribe(function (result) {
            console.log(JSON.stringify(result));
        }, function (error) {
            console.log("ERROR: ", error);
        });
    };
    //Llamado al servicio REST "post"  
    UserService.prototype.postQuote = function (usuario) {
        var ttctPersona = [usuario];
        var ttctRegistro = [usuario];
        console.log(ttctPersona);
        console.log(JSON.stringify({ "request": { "tt_ctPersona": { ttctPersona: ttctPersona, ttctRegistro: ttctRegistro }
            }
        }));
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        this.http.post("http://192.168.2.153:8810/Pruebas/rest/Evento/Post", JSON.stringify({ "request": { "tt_ctPersona": { ttctPersona: ttctPersona, ttctRegistro: ttctRegistro }
            }
        }), { headers: headers })
            .map(function (response) { return response.json(); })
            .subscribe(function (result) {
            console.log(JSON.stringify(result));
            console.log(result.response.oplResultado);
            console.log(result.response.opcMensaje);
        }, function (error) {
            console.log("ERROR: ", error);
        });
    };
    return UserService;
}());
UserService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], UserService);
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXN1YXJpby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzdWFyaW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBb0Q7QUFDcEQsc0NBQTJDO0FBQzNDLHNDQUF3RDtBQUV4RCxnQ0FBOEI7QUFDOUIsaUNBQStCO0FBRS9CLGlDQUFpQztBQUVqQyxJQUFhLFdBQVc7SUFFdEIsOENBQThDO0lBQzlDLHFCQUFvQixJQUFVO1FBQVYsU0FBSSxHQUFKLElBQUksQ0FBTTtJQUFHLENBQUM7SUFFbEMsZ0NBQWdDO0lBQzlCLDhCQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvREFBb0QsQ0FBQzthQUNsRSxHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQWYsQ0FBZSxDQUFDO2FBQ2hDLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0QsbUNBQW1DO0lBQ25DLCtCQUFTLEdBQVQsVUFBVSxPQUFvQjtRQUMzQixJQUFJLFdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLElBQUksWUFBWSxHQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUd6QixPQUFPLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxTQUFTLEVBQ25CLEVBQUMsY0FBYyxFQUNiLEVBQUMsV0FBVyxhQUFBLEVBQUMsWUFBWSxjQUFBLEVBQUM7YUFDM0I7U0FDRixDQUFDLENBQUMsQ0FBQTtRQUNuQixJQUFJLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0RBQW9ELEVBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxTQUFTLEVBQ1IsRUFBQyxjQUFjLEVBQ2IsRUFBQyxXQUFXLGFBQUEsRUFBQyxZQUFZLGNBQUEsRUFBQzthQUMzQjtTQUNGLENBQUMsRUFDWixFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQzthQUVwQixHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQWYsQ0FBZSxDQUFDO2FBQ2hDLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTFDLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUwsa0JBQUM7QUFBRCxDQUFDLEFBaERELElBZ0RDO0FBaERZLFdBQVc7SUFEdkIsaUJBQVUsRUFBRTtxQ0FJZSxXQUFJO0dBSG5CLFdBQVcsQ0FnRHZCO0FBaERZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLy9JbXBvcnRhY2lvbmVzIGRlIHJlY3Vyc29zIHF1ZSBzZSB1c2FuIGVuIGVsIGPDs2RpZ29cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMsIFJlc3BvbnNlIH0gZnJvbSBcIkBhbmd1bGFyL2h0dHBcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL1J4XCI7XHJcbmltcG9ydCBcInJ4anMvYWRkL29wZXJhdG9yL2RvXCI7XHJcbmltcG9ydCBcInJ4anMvYWRkL29wZXJhdG9yL21hcFwiO1xyXG5pbXBvcnQgeyB0dGN0UGVyc29uYSB9IGZyb20gXCIuLi8uLi9tb2RlbG9zL3NnL3VzdWFyaW9cIjtcclxuLy9FeHBvcnRhY2nDs24gZGUgbGEgY2xhc2UgdXN1YXJpb1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBVc2VyU2VydmljZSB7XHJcblxyXG4gIC8vY29uc3RydWN0b3IgZGVsIGh0dHAgcGFyYSBsb3Mgc2VydmljaW9zIFJFU1RcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHApIHt9XHJcbiAgXHJcbiAgLy9MbGFtYWRvIGFsIHNlcnZpY2lvIFJFU1QgXCJnZXRcIlxyXG4gICAgZ2V0UXVvdGUoKSB7XHJcbiAgICAgIHRoaXMuaHR0cC5nZXQoXCJodHRwOi8vMTkyLjE2OC4yLjE1Mzo4ODEwL1BydWViYXMvcmVzdC9FdmVudG8vUG9zdFwiKVxyXG4gICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgLnN1YnNjcmliZShyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgY29uc29sZS5sb2coXCJFUlJPUjogXCIsIGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvL0xsYW1hZG8gYWwgc2VydmljaW8gUkVTVCBcInBvc3RcIiAgXHJcbiAgICBwb3N0UXVvdGUodXN1YXJpbzogdHRjdFBlcnNvbmEpIHtcclxuICAgICAgIHZhciB0dGN0UGVyc29uYSA9IFt1c3VhcmlvXTtcclxuICAgICAgIHZhciB0dGN0UmVnaXN0cm8gID0gW3VzdWFyaW9dO1xyXG4gICAgICAgY29uc29sZS5sb2codHRjdFBlcnNvbmEpXHJcbiAgICAgICBcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCBKU09OLnN0cmluZ2lmeSh7IFwicmVxdWVzdFwiIDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1widHRfY3RQZXJzb25hXCIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3R0Y3RQZXJzb25hLHR0Y3RSZWdpc3Ryb31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcclxuICAgICAgICBoZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XHJcbiAgICAgICAgdGhpcy5odHRwLnBvc3QoXCJodHRwOi8vMTkyLjE2OC4yLjE1Mzo4ODEwL1BydWViYXMvcmVzdC9FdmVudG8vUG9zdFwiLCBcclxuICAgICAgICBKU09OLnN0cmluZ2lmeSh7IFwicmVxdWVzdFwiIDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1widHRfY3RQZXJzb25hXCIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3R0Y3RQZXJzb25hLHR0Y3RSZWdpc3Ryb31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBcclxuICAgICAgICAgICAgICB7IGhlYWRlcnM6IGhlYWRlcnMgfSlcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgICAuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpO1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQucmVzcG9uc2Uub3BsUmVzdWx0YWRvKTtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0LnJlc3BvbnNlLm9wY01lbnNhamUpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFUlJPUjogXCIsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19